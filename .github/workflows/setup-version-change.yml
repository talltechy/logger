name: Create Tag on Version Change

on:
  push:
    branches:
      - main

jobs:
  check_version_and_tag:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install setuptools

      - name: Get current version from setup.py
        id: get_version
        run: |
          VERSION=$(python setup.py --version)
          echo "Current version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"

      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git ls-remote --tags origin | grep "refs/tags/v${{ steps.get_version.outputs.version }}" && echo "true" || echo "false")
          echo "Tag exists: $TAG_EXISTS"
          echo "::set-output name=tag_exists::$TAG_EXISTS"

      - name: Create and push new tag
        if: steps.check_tag.outputs.tag_exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "noreply@github.com"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Version ${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Generate release notes
        id: generate_release_notes
        run: |
          RELEASE_NOTES=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%h - %s" --no-merges)
          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV
          echo "::set-output name=release_notes::$RELEASE_NOTES"

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.generate_release_notes.outputs.release_notes }}
          draft: false
          prerelease: false
